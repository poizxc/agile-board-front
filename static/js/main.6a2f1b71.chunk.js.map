{"version":3,"sources":["Components/issueColumn/issueColumnStyles.js","Components/issueColumn/index.js","Components/issueColumn/IssueColumn.js","Utils/index.js","Config/constants.js","Components/Issue/index.js","Components/Issue/Issue.js","contexts/MessageContext.js","Components/IssuesTable/IssuesTableStyles.js","Components/IssuesTable/index.js","Components/IssuesTable/IssuesTable.js","Components/IssueForm/IssueForm.js","Components/IssueForm/index.js","Components/IssueModal/index.js","Components/IssueModal/IssueModal.js","Components/IssueBoard/index.js","Components/IssueBoard/IssueBoard.js","Hooks/useIssues.js","serviceWorker.js","Components/Message/MessageStyles.js","Components/Message/index.js","Components/Message/Message.js","Components/Header/index.js","Components/Header/Header.js","index.js"],"names":["useStyles","makeStyles","column","padding","width","IssueColumn","children","classes","droppableId","provided","Paper","elevation","ref","innerRef","droppableProps","key","className","Box","Typography","align","Divider","variant","placeholder","splitIssuesIntoColumns","issues","reduce","acc","curr","status","TODO","PENDING","CLOSED","reorderIssues","source","dest","issueUuid","destColumnKey","destIndex","index","sourceColumnKey","sourceIndex","sourceColumnCopy","destColumnCopy","splice","findIndex","x","uuid","issueToChangeColumn","removed","validateDropPossibility","destination","isPendingGoingBack","ISSUES_URL","Issue","issue","setIssueModal","handleDelete","handleEdit","opened","openedForColumn","draggableId","snapshot","mb","draggableProps","dragHandleProps","p","title","description","style","marginBottom","marginTop","estimate","margin","display","justifyContent","flexDirection","Button","onClick","size","color","Icon","fontSize","MessageContext","React","createContext","MessageProvider","useState","open","setOpen","message","setMessage","severity","setSeverity","Provider","value","showMessage","hideMessage","theme","container","paddingBottom","position","overflowX","overflowY","tableWrapper","minWidth","paddingLeft","paddingRight","flexWrap","alignItems","addButton","bottom","right","IssuesTable","setIssues","isLoading","isError","useContext","handleOnDragEnd","a","backup","reorderedItems","axios","patch","console","error","Container","maxWidth","CircularProgress","onDragEnd","Object","keys","map","issueSchema","Yup","shape","min","required","integer","oneOf","IssueForm","initialData","handleOperation","useFormik","initialValues","onSubmit","values","validationSchema","handleSubmit","errors","handleChange","TextField","id","label","name","type","fullWidth","onChange","defaultValue","helperText","multiline","rows","rowsMax","disabled","IssueModal","modalData","handleClose","handleCreate","Modal","modal","disableAutoFocus","onClose","aria-labelledby","outline","fixed","bgcolor","borderRadius","IssueBoard","issueModal","setIsLoading","setIsError","showErrorMessage","useEffect","get","data","fetchIssues","useIssues","newIssue","post","handleModalClose","put","columnCopy","indexOfChangedIssue","delete","filter","log","Boolean","window","location","hostname","match","require","pointerEvents","Message","interval","setInterval","clearInterval","Snackbar","anchorOrigin","vertical","horizontal","TransitionComponent","props","Slide","direction","JSON","stringify","Header","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6a2f1b71.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  column: {\r\n    padding: 15,\r\n    width: '31.5%',\r\n  },\r\n}));\r\nexport default useStyles;\r\n","import IssueColumn from './IssueColumn';\r\n\r\nexport default IssueColumn;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Paper, Typography, Box, Divider } from '@material-ui/core/';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport useStyles from './issueColumnStyles';\r\n\r\nconst IssueColumn = ({ column, children }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Droppable droppableId={column}>\r\n      {(provided) => (\r\n        <Paper\r\n          elevation={8}\r\n          ref={provided.innerRef}\r\n          {...provided.droppableProps}\r\n          key={column}\r\n          className={classes.column}\r\n        >\r\n          <Box>\r\n            <Typography align=\"center\">{column}</Typography>\r\n            <Divider variant=\"fullWidth\" />\r\n          </Box>\r\n          {children()}\r\n          {provided.placeholder}\r\n        </Paper>\r\n      )}\r\n    </Droppable>\r\n  );\r\n};\r\n\r\nIssueColumn.propTypes = {\r\n  column: PropTypes.string,\r\n  children: PropTypes.func,\r\n};\r\n\r\nexport default IssueColumn;\r\n","const splitIssuesIntoColumns = (issues) =>\r\n  issues.reduce(\r\n    (acc, curr) => {\r\n      acc[curr.status] = [...acc[curr.status], curr];\r\n      return acc;\r\n    },\r\n    { TODO: [], PENDING: [], CLOSED: [] },\r\n  );\r\n\r\nconst reorderIssues = (issues, source, dest, issueUuid) => {\r\n  const destColumnKey = dest.droppableId;\r\n  const destIndex = dest.index;\r\n  const sourceColumnKey = source.droppableId;\r\n  const sourceIndex = source.index;\r\n  const sourceColumnCopy = [...issues[sourceColumnKey]];\r\n  const isMovedBetweenColumns = sourceColumnKey !== destColumnKey;\r\n  if (isMovedBetweenColumns) {\r\n    const destColumnCopy = [...issues[destColumnKey]];\r\n    const [issueToChangeColumn] = sourceColumnCopy.splice(\r\n      sourceColumnCopy.findIndex((x) => x.uuid === issueUuid),\r\n      1,\r\n    );\r\n    destColumnCopy.splice(destIndex, 0, { ...issueToChangeColumn, status: destColumnKey });\r\n    return {\r\n      ...issues,\r\n      [sourceColumnKey]: sourceColumnCopy,\r\n      [destColumnKey]: destColumnCopy,\r\n    };\r\n  }\r\n\r\n  const [removed] = sourceColumnCopy.splice(sourceIndex, 1);\r\n  sourceColumnCopy.splice(destIndex, 0, removed);\r\n  return {\r\n    ...issues,\r\n    [sourceColumnKey]: sourceColumnCopy,\r\n  };\r\n};\r\nconst validateDropPossibility = (source, destination) => {\r\n  if (!destination) {\r\n    return false;\r\n  }\r\n  const isPendingGoingBack = source.droppableId === 'PENDING' && destination.droppableId === 'TODO';\r\n  const isClosedGoingBack = source.droppableId === 'CLOSED' && destination.droppableId !== 'CLOSED';\r\n  if (isClosedGoingBack || isPendingGoingBack) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\nexport { validateDropPossibility, reorderIssues, splitIssuesIntoColumns };\r\n","const ISSUES_URL = '/api/v1/issues';\r\n\r\nexport { ISSUES_URL };\r\n","import Issue from './Issue';\r\n\r\nexport default Issue;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Typography, Button, Paper, Box, Divider } from '@material-ui/core';\nimport { Draggable } from 'react-beautiful-dnd';\nconst Issue = ({ issue, index, setIssueModal, handleDelete, column }) => {\n  const handleEdit = () => {\n    setIssueModal({ opened: true, issue, openedForColumn: column });\n  };\n\n  return (\n    <Draggable draggableId={issue.uuid} index={index}>\n      {(provided, snapshot) => (\n        <Box mb={1}>\n          <Paper elevation={6} ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n            <Box p={3}>\n              <Typography variant=\"h6\" align=\"center\">\n                {issue.title}\n              </Typography>\n              <Typography variant=\"body2\"> {issue.description} </Typography>\n              <Divider variant=\"fullWidth\" style={{ marginBottom: 10, marginTop: 10 }} />\n              <Typography variant=\"body2\">Estimate: {issue.estimate} </Typography>\n              <Box margin={1} display=\"flex\" justifyContent=\"space-around\" flexDirection=\"row\">\n                <Button onClick={handleEdit} size=\"small\" color=\"primary\" variant=\"contained\">\n                  <Icon fontSize=\"small\">edit</Icon>\n                </Button>\n\n                <Button\n                  onClick={() => handleDelete(issue.uuid, column)}\n                  size=\"small\"\n                  color=\"secondary\"\n                  variant=\"contained\"\n                >\n                  <Icon fontSize=\"small\">delete</Icon>\n                </Button>\n              </Box>\n            </Box>\n          </Paper>\n        </Box>\n      )}\n    </Draggable>\n  );\n};\n\nIssue.propTypes = {\n  column: PropTypes.string,\n  handleDelete: PropTypes.func,\n  index: PropTypes.number,\n  issue: PropTypes.shape({\n    description: PropTypes.string,\n    estimate: PropTypes.number,\n    title: PropTypes.string,\n    uuid: PropTypes.string,\n  }),\n  setIssueModal: PropTypes.func,\n};\n\nexport default Issue;\n","import React, { useState } from 'react';\r\n\r\nexport const MessageContext = React.createContext();\r\n\r\nconst MessageProvider = ({ children }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [severity, setSeverity] = useState('error');\r\n  const showMessage = (message, severity = 'error') => {\r\n    setOpen(true);\r\n    setMessage(message);\r\n    setSeverity(severity);\r\n  };\r\n  const hideMessage = (message, severity = 'error') => {\r\n    setOpen(false);\r\n    setMessage('message');\r\n    setSeverity('error');\r\n  };\r\n  return (\r\n    <MessageContext.Provider value={{ open, message, severity, showMessage, hideMessage }}>\r\n      {children}\r\n    </MessageContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MessageProvider;\r\n","import { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    padding: 0,\r\n    paddingBottom: 50,\r\n    marginBottom: 20,\r\n    marginTop: 40,\r\n    position: 'relative',\r\n    overflowX: 'auto',\r\n    overflowY: 'hidden',\r\n  },\r\n  tableWrapper: {\r\n    minWidth: 720,\r\n    paddingLeft: 8,\r\n    paddingRight: 8,\r\n    margin: 0,\r\n    flexWrap: 'nowrap',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'stretch',\r\n  },\r\n  addButton: { position: 'absolute', bottom: 0, right: 0 },\r\n}));\r\n\r\nexport default useStyles;\r\n","import IssuesTable from './IssuesTable';\r\n\r\nexport default IssuesTable;\r\n","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CircularProgress, Container, Box, Button, Icon } from '@material-ui/core';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport axios from 'axios';\r\nimport IssueColumn from 'Components/issueColumn';\r\nimport { reorderIssues, validateDropPossibility } from 'Utils';\r\nimport { ISSUES_URL } from 'Config/constants';\r\nimport Issue from 'Components/Issue';\r\nimport { MessageContext } from 'contexts/MessageContext';\r\nimport useStyles from './IssuesTableStyles';\r\n\r\nconst IssuesTable = ({ setIssueModal, setIssues, issues, isLoading, isError, handleDelete }) => {\r\n  const classes = useStyles();\r\n  const { showMessage } = useContext(MessageContext);\r\n\r\n  const handleOnDragEnd = async ({ draggableId, source, destination }) => {\r\n    const backup = { ...issues };\r\n    const canBeMoved = validateDropPossibility(source, destination);\r\n    if (canBeMoved) {\r\n      try {\r\n        const reorderedItems = reorderIssues(issues, source, destination, draggableId);\r\n        setIssues(reorderedItems);\r\n        await axios.patch(`${ISSUES_URL}/${draggableId}`, {\r\n          status: destination.droppableId,\r\n        });\r\n      } catch (e) {\r\n        showMessage(e.message, 'error');\r\n        console.error(e);\r\n        setIssues(backup);\r\n      }\r\n    } else {\r\n      showMessage('Issues Cannot Be Moved Back', 'warning');\r\n    }\r\n  };\r\n  const renderColumns = () =>\r\n    Object.keys(issues).map((column) => (\r\n      <IssueColumn key={column} column={column}>\r\n        {() =>\r\n          issues[column].map((issue, index) => (\r\n            <Issue\r\n              setIssueModal={setIssueModal}\r\n              key={issue.uuid}\r\n              index={index}\r\n              handleDelete={handleDelete}\r\n              issue={issue}\r\n              column={column}\r\n            ></Issue>\r\n          ))\r\n        }\r\n      </IssueColumn>\r\n    ));\r\n  const renderAddButton = () => (\r\n    <Button\r\n      size=\"small\"\r\n      color=\"primary\"\r\n      variant=\"contained\"\r\n      className={classes.addButton}\r\n      onClick={() => {\r\n        setIssueModal({ opened: true });\r\n      }}\r\n    >\r\n      <Icon fontSize=\"small\">add</Icon>\r\n    </Button>\r\n  );\r\n  return (\r\n    <Container className={classes.container} maxWidth=\"md\">\r\n      {isLoading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n          <Box className={classes.tableWrapper}>\r\n            {isError ? (\r\n              'Cannot fetch Issue Data :/'\r\n            ) : (\r\n              <>\r\n                {renderColumns()}\r\n                {renderAddButton()}\r\n              </>\r\n            )}\r\n          </Box>\r\n        </DragDropContext>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\nIssuesTable.propTypes = {\r\n  setIssueModal: PropTypes.func.isRequired,\r\n  setIssues: PropTypes.func.isRequired,\r\n  handleDelete: PropTypes.func.isRequired,\r\n  issues: PropTypes.shape({\r\n    PENDING: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        description: PropTypes.string.isRequired,\r\n        estimate: PropTypes.number.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        uuid: PropTypes.string.isRequired,\r\n        status: PropTypes.oneOf(['TODO', 'PENDING', 'CLOSED']).isRequired,\r\n      }),\r\n    ),\r\n    TODO: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        description: PropTypes.string.isRequired,\r\n        estimate: PropTypes.number.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        uuid: PropTypes.string.isRequired,\r\n        status: PropTypes.oneOf(['TODO', 'PENDING', 'CLOSED']).isRequired,\r\n      }),\r\n    ),\r\n    CLOSED: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        description: PropTypes.string.isRequired,\r\n        estimate: PropTypes.number.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        uuid: PropTypes.string.isRequired,\r\n        status: PropTypes.oneOf(['TODO', 'PENDING', 'CLOSED']).isRequired,\r\n      }),\r\n    ),\r\n  }).isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  isError: PropTypes.bool.isRequired,\r\n};\r\nexport default IssuesTable;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useFormik } from 'formik';\r\nimport { TextField, Button, Icon, Box } from '@material-ui/core';\r\nimport * as Yup from 'yup';\r\n\r\nconst issueSchema = Yup.object().shape({\r\n  title: Yup.string().min(2, 'Too Short!').required('Required'),\r\n  description: Yup.string().min(2, 'Too Short!').required('Required'),\r\n  estimate: Yup.number().integer().min(1).required('Required'),\r\n  status: Yup.string().oneOf(['TODO', 'PENDING', 'CLOSED']),\r\n});\r\n\r\nconst IssueForm = ({ initialData, handleOperation }) => {\r\n  const { handleSubmit, errors, values, handleChange } = useFormik({\r\n    initialValues: {\r\n      status: 'TODO',\r\n      ...initialData,\r\n    },\r\n    onSubmit: (values) => {\r\n      handleOperation(values);\r\n    },\r\n    validationSchema: issueSchema,\r\n  });\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <TextField\r\n          error={errors.title && true}\r\n          margin=\"normal\"\r\n          id=\"title\"\r\n          label=\"Title\"\r\n          name=\"title\"\r\n          type=\"text\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          onChange={handleChange}\r\n          defaultValue={values.title}\r\n          helperText={errors.title}\r\n        />\r\n        <TextField\r\n          error={errors.description && true}\r\n          margin=\"normal\"\r\n          id=\"description\"\r\n          name=\"description\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          multiline\r\n          rows={2}\r\n          rowsMax={5}\r\n          label=\"Description\"\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          defaultValue={values.description}\r\n          helperText={errors.description && errors.description}\r\n        />\r\n        <TextField\r\n          error={errors.estimate && true}\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          id=\"estimate\"\r\n          name=\"estimate\"\r\n          label=\"Estimate\"\r\n          fullWidth\r\n          type=\"number\"\r\n          onChange={handleChange}\r\n          defaultValue={values.estimate}\r\n          helperText={errors.estimate && errors.estimate}\r\n        />\r\n        <TextField\r\n          error={errors.status && true}\r\n          margin=\"normal\"\r\n          id=\"status\"\r\n          label=\"Status\"\r\n          name=\"status\"\r\n          disabled\r\n          type=\"select\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          onChange={handleChange}\r\n          defaultValue={values.status}\r\n          helperText={errors.status && errors.status}\r\n        />\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          <Icon>save_alt</Icon>\r\n        </Button>\r\n      </Box>\r\n    </form>\r\n  );\r\n};\r\n\r\nIssueForm.propTypes = {\r\n  initialData: PropTypes.oneOfType([\r\n    PropTypes.shape({\r\n      description: PropTypes.string,\r\n      estimate: PropTypes.number,\r\n      title: PropTypes.string,\r\n      status: PropTypes.oneOf(['TODO', 'PENDING', 'CLOSED']).isRequired,\r\n      uuid: PropTypes.string,\r\n    }).isRequired,\r\n    PropTypes.bool.isRequired,\r\n  ]).isRequired,\r\n};\r\n\r\nexport default IssueForm;\r\n","import IssueForm from './IssueForm';\r\n\r\nexport default IssueForm;\r\n","import IssueModal from './IssueModal';\r\n\r\nexport default IssueModal;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, Typography, Box, Container, Paper } from '@material-ui/core';\nimport IssueForm from 'Components/IssueForm';\nimport useStyles from 'Components/IssuesTable/IssuesTableStyles';\nconst IssueModal = ({ modalData: { issue, opened }, handleClose, handleCreate, handleEdit }) => {\n  const classes = useStyles();\n\n  const renderEdit = () => {\n    return <IssueForm initialData={issue} handleOperation={handleEdit}></IssueForm>;\n  };\n  const renderCreate = () => {\n    return <IssueForm initialData handleOperation={handleCreate}></IssueForm>;\n  };\n\n  return (\n    <Modal\n      className={classes.modal}\n      disableAutoFocus={true}\n      open={opened}\n      onClose={handleClose}\n      aria-labelledby=\"form-Modal-title\"\n    >\n      <Container style={{ outline: 'none' }} maxWidth=\"sm\" fixed>\n        <Paper elevation={24}>\n          <Box bgcolor=\"white\" padding={3} marginTop={10}>\n            <Box bgcolor=\"primary.main\" color=\"primary.contrastText\" borderRadius={2} p={1} mb={1}>\n              <Typography align=\"center\">{issue ? 'Edit Issue' : 'Create Issue'}</Typography>\n            </Box>\n            {issue ? renderEdit(issue) : renderCreate()}\n          </Box>\n        </Paper>\n      </Container>\n    </Modal>\n  );\n};\n\nIssueModal.propTypes = {\n  modalData: PropTypes.shape({\n    description: PropTypes.string,\n    estimate: PropTypes.number,\n    title: PropTypes.string,\n    uuid: PropTypes.string,\n  }).isRequired,\n  handleClose: PropTypes.func.isRequired,\n  handleCreate: PropTypes.func.isRequired,\n  handleEdit: PropTypes.func.isRequired,\n};\n\nexport default IssueModal;\n","import IssueBoard from './IssueBoard';\r\n\r\nexport default IssueBoard;\r\n","import React, { useContext } from 'react';\nimport IssuesTable from 'Components/IssuesTable';\nimport IssueModal from 'Components/IssueModal';\nimport useIssues from 'Hooks/useIssues';\nimport axios from 'axios';\nimport { ISSUES_URL } from 'Config/constants';\nimport { MessageContext } from 'contexts/MessageContext';\nconst IssueBoard = () => {\n  const [issueModal, setIssueModal] = React.useState({ opened: false });\n  const { isLoading, isError, issues, setIssues } = useIssues();\n  const { showMessage } = useContext(MessageContext);\n\n  const handleCreate = async (newIssue) => {\n    try {\n      const { data } = await axios.post(ISSUES_URL, newIssue);\n      setIssues({ ...issues, TODO: [...issues.TODO, data] });\n      handleModalClose();\n      showMessage('Successfully Created Issue', 'success');\n    } catch (e) {\n      showMessage(e.message);\n      console.error(e);\n    }\n  };\n\n  const handleEdit = async (newIssue) => {\n    try {\n      await axios.put(`${ISSUES_URL}/${newIssue.uuid}`, {\n        title: newIssue.title,\n        description: newIssue.description,\n        status: newIssue.status,\n        estimate: newIssue.estimate,\n      });\n      const columnCopy = [...issues[newIssue.status]];\n      const indexOfChangedIssue = columnCopy.findIndex((issue) => issue.uuid === newIssue.uuid);\n      columnCopy[indexOfChangedIssue] = newIssue;\n      setIssues({ ...issues, [newIssue.status]: columnCopy });\n      handleModalClose();\n      showMessage('Successfully Edited Issue', 'success');\n    } catch (e) {\n      showMessage(e.message);\n      console.error(e);\n    }\n  };\n\n  const handleDelete = async (uuid, column) => {\n    try {\n      await axios.delete(`${ISSUES_URL}/${uuid}`);\n      setIssues({ ...issues, [column]: issues[column].filter((issue) => issue.uuid !== uuid) });\n      showMessage('Successfully Deleted Issue', 'success');\n    } catch (e) {\n      showMessage(e.message);\n      console.log(e);\n    }\n  };\n\n  const handleModalClose = () => {\n    setIssueModal({ opened: false });\n  };\n\n  return (\n    <>\n      <IssuesTable\n        setIssueModal={setIssueModal}\n        isLoading={isLoading}\n        isError={isError}\n        issues={issues}\n        handleDelete={handleDelete}\n        setIssues={setIssues}\n      />\n      <IssueModal\n        modalData={issueModal}\n        handleClose={handleModalClose}\n        handleEdit={handleEdit}\n        handleCreate={handleCreate}\n      />\n    </>\n  );\n};\n\nexport default IssueBoard;\n","import { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { ISSUES_URL } from 'Config/constants';\r\nimport { splitIssuesIntoColumns } from 'Utils';\r\nimport { MessageContext } from 'contexts/MessageContext';\r\n\r\nexport default () => {\r\n  const [issues, setIssues] = useState({\r\n    TODO: [],\r\n    PENDING: [],\r\n    CLOSED: [],\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const { showMessage: showErrorMessage } = useContext(MessageContext);\r\n  useEffect(() => {\r\n    const fetchIssues = async () => {\r\n      setIsLoading(true);\r\n      setIsError(false);\r\n      try {\r\n        const { data } = await axios.get(ISSUES_URL);\r\n\r\n        setIssues(splitIssuesIntoColumns(data));\r\n      } catch (error) {\r\n        showErrorMessage(error.message);\r\n        setIsError(true);\r\n        console.error(error);\r\n      }\r\n\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchIssues();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return { issues, setIssues, isLoading, isError };\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const { makeStyles } = require('@material-ui/core');\r\n\r\nconst useStyles = makeStyles({\r\n  message: { pointerEvents: 'none' },\r\n});\r\n\r\nexport default useStyles;\r\n","import Message from './Message';\r\n\r\nexport default Message;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Snackbar, Slide } from '@material-ui/core';\r\nimport { MessageContext } from 'contexts/MessageContext';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport useStyles from './MessageStyles';\r\n\r\nconst ErrorMessage = () => {\r\n  const { open, severity, message, hideMessage } = useContext(MessageContext);\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      hideMessage();\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [hideMessage]);\r\n\r\n  return (\r\n    <Snackbar\r\n      className={classes.message}\r\n      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      TransitionComponent={(props) => <Slide {...props} direction=\"left\" />}\r\n      open={open}\r\n    >\r\n      <MuiAlert severity={severity}>{typeof message === 'string' ? message : JSON.stringify(message)}</MuiAlert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import Header from './Header';\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Paper, Box, Typography } from '@material-ui/core';\r\n\r\nconst Header = () => (\r\n  <Paper variant=\"elevation\">\r\n    <Box p={2}>\r\n      <Typography variant=\"h4\" align=\"center\">\r\n        Recruitment Task - Agile Board\r\n      </Typography>\r\n    </Box>\r\n  </Paper>\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport IssueBoard from 'Components/IssueBoard';\nimport * as serviceWorker from 'serviceWorker';\nimport MessageProvider from 'contexts/MessageContext';\nimport Message from 'Components/Message';\nimport Header from 'Components/Header';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <MessageProvider>\n      <Header />\n      <IssueBoard />\n      <Message />\n    </MessageProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}